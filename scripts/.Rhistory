separate(Plot.ID, into = c('stratum', 'id'), sep = '-') %>%
mutate(id = str_pad(id, 3, pad = "0")) %>%
# group up - and take that 'sampled' from the top - if present
unite('Plot.ID', stratum:id, sep = "-", remove = F) %>%
group_by(Plot.ID) %>%
arrange(psF)
# some plots were not sampled in one year, but subsequently sampled
status_check <- plot_status %>% # we want to ensure all of these plots are returned as sampled.
mutate(grp_n = n()) %>%
filter(grp_n >= 2, Plot.Status == 'sampled')
plot_status <- plot_status %>%
slice_head(n = 1) %>%
ungroup()
# inner_join(plot_status, status_check, by = 'Plot.ID') # take a look for yourself, all good.
# it turns out some oversamples from the original design were not populated over to the yearly tracking
# sheets. We can note there status as not_sampled here.
plot_status <- plot_status %>%
mutate(across(.cols = Plot.ID:stratum, ~ str_to_upper(.x)))
pts <- st_read(
'/media/sagesteppe/ExternalHD/aimDB/data/raw/AIM_Sample_Design/AIM_Design_Stratification.shp',
quiet = T) %>%
left_join(., plot_status, by = c('PLOTID' = 'Plot.ID')) %>%
select(-Panel) %>%
separate(PLOTID, into = c('stratum', 'id'), sep = '-', remove = F) %>%
mutate(across(Plot.Status:psF, ~ replace_na(.x, 'not_sampled'))) %>%
# some over samples were not completed
select(Plot.ID = PLOTID, stratum, id, Panel = PANEL, Plot.Status, psF, xcoord, ycoord, geometry)
# st_write(pts,
#          '/media/sagesteppe/ExternalHD/UFO_cartography/AIM_plots_outcomes/plots_outcomes.shp',
#          quiet = T)
plot_status <- pts %>%
select(colnames(plot_status)) %>%
st_drop_geometry()
plot_summary <- plot_status %>%
group_by(stratum, Plot.Status) %>%
summarise(n = n())  %>%
ungroup(Plot.Status) %>%
mutate(total = sum(n)) %>%
pivot_longer(n:total, values_to = 'Number') %>%
mutate(Plot.Status = if_else(name == 'total', 'total', Plot.Status)) %>%
select(-name) %>%
group_by(stratum, Plot.Status) %>%
sample_n(1)
rm(status_check)
# format table for printing
plot_summary <- plot_summary %>%
pivot_wider(values_from = Number, names_from = Plot.Status) %>%
mutate(stratum = str_to_upper(stratum)) %>%
mutate(across(.cols = everything(), ~ replace_na(.x, 0))) %>%
rename_with(., ~ str_to_sentence(.))
# DERIVE THE VALUES FOR BOTH TOTAL AREA AND AREAS IN ACRES
r <- read.csv(file.path(p2d, 'UFO_strata_areas.csv')) %>%
mutate(ProportionalArea = Cells/sum(Cells)) %>%
select(Stratum, Code, ProportionalArea, Acres)
deSS <- data.frame( # desired sample size per stratum over live of sample design
'Stratum' = c("AS", "GR", "MC", "MMS", "OT" , "PJ", "PP", "RI", "SD" , "SS" ),
'DesiredSS' = c(5, 5, 15, 25, 5, 25, 5, 15, 75, 80),
'PropTarget' = c(0.01, 0.02, 0.05, 0.1, 0.01, 0.12, 0.01, 0.05, 0.3, 0.33)
)
OriginalWeights <- left_join(plot_summary, r, by = c('Stratum' = 'Code')) %>%
left_join(., deSS, by = 'Stratum') %>%
select(StratumName = Stratum.y, Stratum, Total,  NotSampled = Not_sampled, Rejected, Sampled,
DesiredSS, PropArea = ProportionalArea, PropTarget, Acres) %>%
mutate(ApproxStWgt = Acres / (DesiredSS/5))
OriginalWeights %>%
mutate(PropArea = round(PropArea, 3)) %>%
mutate(across(.cols = c(Acres, ApproxStWgt),  round)) %>%
arrange(-Acres) %>%
ungroup() %>%
select(Stratum, Acres, PropArea, PropTarget, DesiredSS, ApproxStWgt) %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Stratum', 'Total Area (acres)', 'Prop. Area',
'Prop. Site', 'No. Plots', 'Plot Wt.'),
caption = "Original Sample Design for the Entire Sample Frame",
align = c("c", rep('r', times = (ncol(.) - 1))))
rm(r, plot_summary)
Full_newWghts <- plotWeigher(OriginalWeights, pts)
Full_newWghts %>%
mutate(across(TotalAcres:WgtAcres, ~ round(.x))) %>%
mutate(across(PlotsSampled:PlotsRejected, ~ replace_na(.x, 0))) %>%
arrange(-TotalAcres) %>%
select(Stratum, PropInference, AreaInference:WgtAcres, PlotsSampled, PlotsRejected) %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Stratum', 'Inf. Prop.',
'Area Inf.', 'Plot Wt.', 'Sampled', 'Rejected'),
caption = "Realized Weighted Sample Design for the Entire Sample Frame",
align = c("c", rep('r', times = (ncol(.) - 1))))
OriginalWeights_results <- mutate(OriginalWeights, 'Area' = 'SampleFrame') %>%
select(-any_of(c('StratumName')))
NewWeights_results <- mutate(Full_newWghts, 'Area' = 'SampleFrame') %>%
select(-any_of(c('StratumName')))
rm(OriginalWeights, Full_newWghts)
spatial_products <- '/media/sagesteppe/ExternalHD/UFO_cartography'
design_rast <- '/media/sagesteppe/ExternalHD/UFO_AIM_Design_Stratification/processed'
lookup_table <- read.csv(file.path(design_rast, 'UFO_strata_areas.csv')) %>%
select(RasterValue, Code)
strat_raster <- terra::rast(file.path(design_rast, 'UFO_Strata_reclass_30m.tif'))
uFO <- st_read(file.path(spatial_products,
'BLM_CO_Grazing_Allotments/gra_allot_poly.shp'), quiet = T)
acecs <- st_read(file.path(spatial_products, 'BLM_CO_ACEC/acec_desig_poly.shp'),
quiet = T) %>%
st_intersection(uFO, .) %>%
select(NAME = ACEC_NAME) %>%
mutate(TYPE = 'ACEC')
wsa <- st_read(file.path(spatial_products, 'BLM_CO_WSA/nlcs_wsa_poly.shp'),
quiet = T) %>%
st_intersection(uFO, .) %>%
select(NAME = NLCS_NAME) %>%
mutate(TYPE = 'WSA')
wsAcec <- bind_rows(acecs, wsa) %>%
mutate(ID = 1:n(), .before = 1)
wsAcec_OriginalWeights <- originalWeights(sample_area = wsAcec, strat_raster = strat_raster, pt_data = pts)
wsAcec_pts <- wsAcec_OriginalWeights[[1]] # we return a list with the points needed for recalculating the weights
wsAcec_OriginalWeights <- wsAcec_OriginalWeights[[2]]
View(wsAcec_OriginalWeights)
View(wsAcec_pts)
st_intersection(wsAcec_pts, acecs)
st_crs(wsAcec_pts)
st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs)
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs)
View(acec_pts)
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME) %>%
add_count()
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME) %>%
add_count(name = 'total_plots')
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME) %>%
filter(!str_detect(Panel, 'versample'))
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME) %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots')
View(acecs)
View(acec_pts)
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME)
acec_pts_sampled <- acec_pts
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots')
View(acec_pts_sampled)
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), plot_status = 'not_sampled') %>%
wsa <- wsa %>% group_by(NAME) %>%
summarize(geometry = st_union(geometry)) # wsa are off.
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), plot_status = 'not_sampled')
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), plot_status == 'not_sampled')
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), Plot.Status == 'not_sampled')
View(acec_pts_rejected)
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), Plot.Status == 'not_sampled') %>%
add_count(name = 'total_plots')
View(acec_pts_rejected)
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), Plot.Status == 'not_sampled') %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots)
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), Plot.Status == 'not_sampled') %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
st_drop_geometry()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots')
View(acec_pts_sampled)
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), Plot.Status == 'not_sampled') %>%
add_count(name = 'plots_rejected') %>%
select(NAME, plots_rejected) %>%
st_drop_geometry()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots)
View(acec_pts_sampled)
View(acec_pts_rejected)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(NAME)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME')
View(acec_pts_sampled)
View(acec_pts)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
left_join(., acec_pts %>%
select(NAME), by = 'NAME')
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
left_join(., acec_pts %>%
select(NAME) %>% st_drop_geometry(), by = 'NAME')
View(acec_pts_sampled)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME')
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME') %>%
distinct(0)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME') %>%
distinct()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME') %>%
st_drop_geometry() %>%
distinct()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME') %>%
st_drop_geometry() %>%
distinct()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME') %>%
st_drop_geometry() %>%
distinct()
acecs <- acecs %>% group_by(NAME) %>%
summarize(geometry = st_union(geometry))
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME)
View(acec_pts)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME') %>%
distinct()
View(acec_pts_sampled)
acec_pts_sampled %>% st_drop_geometry()
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), Plot.Status == 'not_sampled') %>%
add_count(name = 'plots_rejected') %>%
select(NAME, plots_rejected) %>%
st_drop_geometry()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME') %>%
distinct()
acec_pts_sampled %>% st_drop_geometry()
acec_pts_sampled %>%
select(NAME, total_plots, plots_rejected)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acec_pts %>%
select(NAME) , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct()
View(acec_pts)
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME)
View(acec_pts)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acecs %>%
select(NAME) , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct()
View(acecs)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
left_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
right_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
right_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct() %>%
mutate(across(where(is.numeric, replace_na(.x, 0))))
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
right_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct() %>%
mutate(across(where(is.numeric, ~ replace_na(.x, 0))))
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
right_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct() %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0))))
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
right_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct() %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
acecs <- acecs %>% group_by(NAME) %>%
summarize(geometry = st_union(geometry)) %>%
filter(NAME != 'Sinbad Valley ACEC')
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME)
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), Plot.Status == 'not_sampled') %>%
add_count(name = 'plots_rejected') %>%
select(NAME, plots_rejected) %>%
st_drop_geometry()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
right_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct() %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
wsa <- wsa %>% group_by(NAME) %>%
summarize(geometry = st_union(geometry)) # wsa are off.
wsAcec_OriginalWeights %>%
mutate(PropArea = round(PropArea, 3)) %>%
mutate(across(.cols = c(Acres, ApproxStWgt),  round)) %>%
arrange(-Acres) %>%
ungroup() %>%
select(Stratum, Acres, PropArea, PropTarget, DesiredSS, ApproxStWgt) %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Stratum', 'Total Area (acres)', 'Prop. Area',
'Prop. Site', 'No. Plots', 'Plot Wt.'),
caption = "Original Sample Design for Areas of Critical Environmental Concern
& Wilderness Study Areas",
align = c("c", rep('r', times = (ncol(.) - 1))))
acecs %>%
mutate(Area = round(as.numeric(units::set_units(st_area(.), "acre")), 0)) %>%
st_drop_geometry() %>%
arrange(-Area)
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
right_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct() %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
acecs <- acecs %>% group_by(NAME) %>%
summarize(geometry = st_union(geometry)) %>%
filter(NAME != 'Sinbad Valley ACEC')
acec_pts <- st_intersection(st_transform(wsAcec_pts, st_crs(acecs)) , acecs) %>%
group_by(NAME)
acec_pts_rejected <- acec_pts %>%
filter(!str_detect(Panel, 'versample'), Plot.Status == 'not_sampled') %>%
add_count(name = 'plots_rejected') %>%
select(NAME, plots_rejected) %>%
st_drop_geometry()
acec_pts_sampled <- acec_pts %>%
filter(!str_detect(Panel, 'versample')) %>%
add_count(name = 'total_plots') %>%
select(NAME, total_plots) %>%
left_join(., acec_pts_rejected, by = 'NAME') %>%
st_drop_geometry() %>%
right_join(., acecs , by = 'NAME') %>%
select(NAME, total_plots, plots_rejected) %>%
distinct() %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
acecs %>%
mutate(Area = round(as.numeric(units::set_units(st_area(.), "acre")), 0)) %>%
st_drop_geometry() %>%
arrange(-Area)
acecs %>%
mutate(Area = round(as.numeric(units::set_units(st_area(.), "acre")), 0)) %>%
st_drop_geometry() %>%
arrange(-Area) %>%
left_join(., acec_pts_sampled)
acecs %>%
mutate(Area = round(as.numeric(units::set_units(st_area(.), "acre")), 0)) %>%
st_drop_geometry() %>%
arrange(-Area) %>%
left_join(., acec_pts_sampled)  %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Name', 'Area (ac.)',
'Drawn', 'Sampled'),
caption = "Number of Plots Drawn per ACEC",
align = c("c", rep('r', times = (ncol(.) - 1))))
acecs %>%
mutate(Area = round(as.numeric(units::set_units(st_area(.), "acre")), 0)) %>%
st_drop_geometry() %>%
arrange(-Area) %>%
left_join(., acec_pts_sampled)  %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Name', 'Area (ac.)',
'Drawn', 'Sampled'),
caption = "Number of Plots Drawn per ACEC",
align = c("c", rep('r', times = (ncol(.) - 1)))) %>%
kableExtra::add_header_above(., c(" ", "Group 1" = 5, "Group 2" = 6))
acecs %>%
mutate(Area = round(as.numeric(units::set_units(st_area(.), "acre")), 0)) %>%
st_drop_geometry() %>%
arrange(-Area) %>%
left_join(., acec_pts_sampled)  %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Name', 'Area (ac.)',
'Drawn', 'Sampled'),
caption = "Number of Plots Drawn per ACEC",
align = c("c", rep('r', times = (ncol(.) - 1)))) %>%
kableExtra::add_header_above(., c(" ", "Group 1" = 4))
acecs %>%
mutate(Area = round(as.numeric(units::set_units(st_area(.), "acre")), 0)) %>%
st_drop_geometry() %>%
arrange(-Area) %>%
left_join(., acec_pts_sampled)  %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Name', 'Area (ac.)',
'Drawn', 'Sampled'),
caption = "Number of Plots Drawn per ACEC",
align = c("c", rep('r', times = (ncol(.) - 1)))) %>%
kableExtra::add_header_above(., c(" ", "Group 1" = 3))
acecs %>%
mutate(Area = round(as.numeric(units::set_units(st_area(.), "acre")), 0)) %>%
st_drop_geometry() %>%
arrange(-Area) %>%
left_join(., acec_pts_sampled)  %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Name', 'Area (ac.)',
'Drawn', 'Sampled'),
caption = "Number of Plots Drawn per ACEC",
align = c("c", rep('r', times = (ncol(.) - 1)))) %>%
kableExtra::add_header_above(., c(" ", "Group 1" = 3))
