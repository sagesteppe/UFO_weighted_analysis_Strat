sample_n(1)
rm(status_check)
# format table for printing
plot_summary <- plot_summary %>%
pivot_wider(values_from = Number, names_from = Plot.Status) %>%
mutate(stratum = str_to_upper(stratum)) %>%
mutate(across(.cols = everything(), ~ replace_na(.x, 0))) %>%
rename_with(., ~ str_to_sentence(.))
# DERIVE THE VALUES FOR BOTH TOTAL AREA AND AREAS IN ACRES
r <- read.csv(file.path(p2d, 'UFO_strata_areas.csv')) %>%
mutate(ProportionalArea = Cells/sum(Cells)) %>%
select(Stratum, Code, ProportionalArea, Acres)
deSS <- data.frame( # desired sample size per stratum over live of sample design
'Stratum' = c("AS", "GR", "MC", "MMS", "OT" , "PJ", "PP", "RI", "SD" , "SS" ),
'DesiredSS' = c(5, 5, 15, 25, 5, 25, 5, 15, 75, 80),
'PropTarget' = c(0.01, 0.02, 0.05, 0.1, 0.01, 0.12, 0.01, 0.05, 0.3, 0.33)
)
OriginalWeights <- left_join(plot_summary, r, by = c('Stratum' = 'Code')) %>%
left_join(., deSS, by = 'Stratum') %>%
select(StratumName = Stratum.y, Stratum, Total,  NotSampled = Not_sampled, Rejected, Sampled,
DesiredSS, PropArea = ProportionalArea, PropTarget, Acres) %>%
mutate(ApproxStWgt = Acres / (DesiredSS/5))
write.csv(OriginalWeights, '../data/processed/OriginalWeightsSampleDesign.csv', row.names = F)
OriginalWeights %>%
mutate(PropArea = round(PropArea, 3)) %>%
mutate(across(.cols = c(Acres, ApproxStWgt),  round)) %>%
arrange(-Acres) %>%
ungroup() %>%
select(StratumName, Acres, PropArea, PropTarget, DesiredSS, ApproxStWgt) %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Stratum', 'Total Area (acres)', 'Prop. Area', 'Prop. Site', 'No. Sites', 'Plot Wt.'),
align = c("c", rep('r', times = (ncol(.) - 1))))
rm(r, plot_summary)
Full_newWghts <- plotWeigher(OriginalWeights, pts)
Full_newWghts %>%
mutate(across(TotalAcres:WgtAcres, ~ round(.x))) %>%
mutate(across(PlotsSampled:PlotsRejected, ~ replace_na(.x, 0))) %>%
arrange(-TotalAcres) %>%
select(Stratum, PropInference, TotalAcres:WgtAcres, PlotsSampled, PlotsRejected) %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Stratum', 'Inference Prop.', 'Area (acres)',
'Area to Infer', 'Plot Wt.', 'Sampled', 'Rejected'),
align = c("c", rep('r', times = (ncol(.) - 1))))
# write.csv() ??
rm(OriginalWeights, Full_newWghts)
spatial_products <- '/media/sagesteppe/ExternalHD/UFO_cartography'
design_rast <- '/media/sagesteppe/ExternalHD/UFO_AIM_Design_Stratification/processed'
lookup_table <- read.csv(file.path(design_rast, 'UFO_strata_areas.csv')) %>%
select(RasterValue, Code)
strat_raster <- terra::rast(file.path(design_rast, 'UFO_Strata_reclass_30m.tif'))
uFO <- st_read(file.path(spatial_products,
'BLM_CO_Grazing_Allotments/gra_allot_poly.shp'), quiet = T)
acecs <- st_read(file.path(spatial_products, 'BLM_CO_ACEC/acec_desig_poly.shp'),
quiet = T) %>%
st_intersection(uFO, .) %>%
select(NAME = ACEC_NAME) %>%
mutate(TYPE = 'ACEC')
wsa <- st_read(file.path(spatial_products, 'BLM_CO_WSA/nlcs_wsa_poly.shp'),
quiet = T) %>%
st_intersection(uFO, .) %>%
select(NAME = NLCS_NAME) %>%
mutate(TYPE = 'WSA')
wsAcec <- bind_rows(acecs, wsa) %>%
mutate(ID = 1:n(), .before = 1)
rm(acecs, wsa)
wsAcec_OriginalWeights <- originalWeights(sample_area = wsAcec, strat_raster = strat_raster, pt_data = pts)
wsAcec_pts <- wsAcec_OriginalWeights[[1]] # we return a list with the points needed for recalculating the weights
wsAcec_OriginalWeights <- wsAcec_OriginalWeights[[2]]
wsAcec_OriginalWeights %>%
mutate(PropArea = round(PropArea, 3)) %>%
mutate(across(.cols = c(Acres, ApproxStWgt),  round)) %>%
arrange(-Acres) %>%
ungroup() %>%
select(Stratum, Acres, PropArea, PropTarget, DesiredSS, ApproxStWgt) %>%
knitr::kable(., digits = 2, format.args = list(big.mark = ","),
col.names = c('Stratum', 'Total Area (acres)', 'Prop. Area',
'Prop. Site', 'No. Sites', 'Plot Wt.'),
align = c("c", rep('r', times = (ncol(.) - 1))))
rm(raster_cells, wsaSpat, wsAcec, wsAcec_area_summary, wsAcec_pt_draw,
base_wsAcec_pts, raster_cells, wsAcec_areas, design_rast)
plotWeigher(wsAcec_OriginalWeights, wsAcec_pts)
rm(wsAcec_OriginalWeights, wsAcec_pts)
monuments <- st_read(file.path(spatial_products, 'BLM_CO_NM_NCA/nlcs_nm_nca_poly.shp'),
quiet = T) %>%
st_intersection(uFO, .) %>%
group_by(NLCS_NAME) %>%
st_collection_extract("POLYGON")  %>%  # there are these funny points
summarize(geometry = st_union(geometry)) %>%
mutate(ID = 1:n(), .before = 1)
?OriginalWeights
View(originalWeights)
monuments <- st_read(file.path(spatial_products, 'BLM_CO_NM_NCA/nlcs_nm_nca_poly.shp'),
quiet = T) %>%
st_intersection(uFO, .) %>%
group_by(NLCS_NAME) %>%
st_collection_extract("POLYGON")  %>%  # there are these funny points
summarize(geometry = st_union(geometry)) %>%
mutate(ID = 1:n(), .before = 1)
View(monuments)
DEnm <- monuments %>% filter(str_detect(Panel, 'Dominguez'))
DEnm <- monuments %>% filter(str_detect(NLCS_NAME, 'Dominguez'))
OW_deNM <- OriginalWeights(DEnm , strat_raster, pts)
OW_deNM <- originalWeighter(DEnm , strat_raster, pts)
OW_deNM <- originalWeigher(DEnm , strat_raster, pts)
OW_deNM <- originalWeights(DEnm , strat_raster, pts)
View(pts)
any_of
?any_of
originalWeights <- function(sample_area, strat_raster, pt_data){
focal_pts <- pts[unlist(st_intersects(sample_area, st_transform(pt_data, st_crs(sample_area)))),]
# identify the cover of each stratum in the focal area
areaSpat <- vect(sample_area)
focal_areas <- terra::expanse(areaSpat, unit = 'ha') * 2.47105 # conversion to acres
TotalFocalArea <- sum(focal_areas)
focal_areas <- bind_cols(sample_area, Total_Area =  focal_areas, TotalFocalArea = TotalFocalArea)
areaSpat <- project(areaSpat, crs(strat_raster))
raster_cells <- extract(strat_raster, areaSpat) %>%
group_by(ID, BPS_CODE) %>%
count() %>%
ungroup(BPS_CODE) %>%
mutate(PropArea = n/sum(n))  %>%
left_join(., lookup_table, by = c('BPS_CODE' = 'RasterValue'))
rm(wsaSpat, TotalFocalArea)
focal_areas <- left_join(focal_areas, raster_cells) %>%
mutate(Area = Total_Area * PropArea)  %>%
select(any_of(ID, NAME, TYPE, Total_Area, Code, PropArea, Area, TotalFocalArea))
area_summary <- focal_areas %>%
ungroup() %>%
group_by(Code) %>%
mutate(TotalArea = sum(Area)) %>%
ungroup() %>%
distinct(Code, .keep_all = T) %>%
select(Stratum = Code, TotalArea, PropArea, TotalFocalArea) %>%
mutate(PropArea = TotalArea/sum(TotalArea)) %>%
st_drop_geometry()
base_target_pts <- focal_pts %>%
filter(str_detect(Panel, 'OverSample', negate = T))
# need to calculate the desired sites per stratum as function of plot weight.
area_summary <- area_summary %>%
left_join(., deSS, by = 'Stratum') %>%  # desired ss total_area
mutate(DesiredSS = round(DesiredSS * (nrow(base_target_pts)/255))) %>%
drop_na()
pt_draw <- focal_pts %>%
group_by(stratum, Plot.Status) %>%
count() %>%
st_drop_geometry() %>%
pivot_wider(id_cols = stratum, names_from = Plot.Status, values_from = n,
values_fill = 0) %>%
rowwise() %>%
mutate(total = sum(across(not_sampled:sampled)), .before = 'not_sampled')
OriginalWeights <- left_join(area_summary, pt_draw,
by = c('Stratum' = 'stratum')) %>%
select(any_of(Stratum, Total = total, NotSampled = not_sampled, Rejected = rejected,
Sampled = sampled, DesiredSS, PropArea, PropTarget, Acres =  TotalArea)) %>%
mutate(ApproxStWgt =  if_else(DesiredSS >= 5, (Acres/DesiredSS) * 5, (DesiredSS/5) * Acres))
#  OriginalWeights <- drop_na(OriginalWeights)
obs <- list(focal_pts, OriginalWeights)
return(obs)
}
OW_deNM <- originalWeights(DEnm , strat_raster, pts)
originalWeights <- function(sample_area, strat_raster, pt_data){
focal_pts <- pts[unlist(st_intersects(sample_area, st_transform(pt_data, st_crs(sample_area)))),]
# identify the cover of each stratum in the focal area
areaSpat <- vect(sample_area)
focal_areas <- terra::expanse(areaSpat, unit = 'ha') * 2.47105 # conversion to acres
TotalFocalArea <- sum(focal_areas)
focal_areas <- bind_cols(sample_area, Total_Area =  focal_areas, TotalFocalArea = TotalFocalArea)
areaSpat <- project(areaSpat, crs(strat_raster))
raster_cells <- extract(strat_raster, areaSpat) %>%
group_by(ID, BPS_CODE) %>%
count() %>%
ungroup(BPS_CODE) %>%
mutate(PropArea = n/sum(n))  %>%
left_join(., lookup_table, by = c('BPS_CODE' = 'RasterValue'))
rm(wsaSpat, TotalFocalArea)
focal_areas <- left_join(focal_areas, raster_cells) %>%
mutate(Area = Total_Area * PropArea)  %>%
select(any_of(c(ID, NAME, TYPE, Total_Area, Code, PropArea, Area, TotalFocalArea)))
area_summary <- focal_areas %>%
ungroup() %>%
group_by(Code) %>%
mutate(TotalArea = sum(Area)) %>%
ungroup() %>%
distinct(Code, .keep_all = T) %>%
select(Stratum = Code, TotalArea, PropArea, TotalFocalArea) %>%
mutate(PropArea = TotalArea/sum(TotalArea)) %>%
st_drop_geometry()
base_target_pts <- focal_pts %>%
filter(str_detect(Panel, 'OverSample', negate = T))
# need to calculate the desired sites per stratum as function of plot weight.
area_summary <- area_summary %>%
left_join(., deSS, by = 'Stratum') %>%  # desired ss total_area
mutate(DesiredSS = round(DesiredSS * (nrow(base_target_pts)/255))) %>%
drop_na()
pt_draw <- focal_pts %>%
group_by(stratum, Plot.Status) %>%
count() %>%
st_drop_geometry() %>%
pivot_wider(id_cols = stratum, names_from = Plot.Status, values_from = n,
values_fill = 0) %>%
rowwise() %>%
mutate(total = sum(across(not_sampled:sampled)), .before = 'not_sampled')
OriginalWeights <- left_join(area_summary, pt_draw,
by = c('Stratum' = 'stratum')) %>%
select(any_of(c(Stratum, Total = total, NotSampled = not_sampled, Rejected = rejected,
Sampled = sampled, DesiredSS, PropArea, PropTarget, Acres =  TotalArea))) %>%
mutate(ApproxStWgt =  if_else(DesiredSS >= 5, (Acres/DesiredSS) * 5, (DesiredSS/5) * Acres))
#  OriginalWeights <- drop_na(OriginalWeights)
obs <- list(focal_pts, OriginalWeights)
return(obs)
}
OW_deNM <- originalWeights(DEnm , strat_raster, pts)
originalWeights <- function(sample_area, strat_raster, pt_data){
focal_pts <- pts[unlist(st_intersects(sample_area, st_transform(pt_data, st_crs(sample_area)))),]
# identify the cover of each stratum in the focal area
areaSpat <- vect(sample_area)
focal_areas <- terra::expanse(areaSpat, unit = 'ha') * 2.47105 # conversion to acres
TotalFocalArea <- sum(focal_areas)
focal_areas <- bind_cols(sample_area, Total_Area =  focal_areas, TotalFocalArea = TotalFocalArea)
areaSpat <- project(areaSpat, crs(strat_raster))
raster_cells <- extract(strat_raster, areaSpat) %>%
group_by(ID, BPS_CODE) %>%
count() %>%
ungroup(BPS_CODE) %>%
mutate(PropArea = n/sum(n))  %>%
left_join(., lookup_table, by = c('BPS_CODE' = 'RasterValue'))
rm(wsaSpat, TotalFocalArea)
focal_areas <- left_join(focal_areas, raster_cells) %>%
mutate(Area = Total_Area * PropArea)  %>%
select(any_of(c('ID', 'NAME', 'TYPE', 'Total_Area', 'Code', 'PropArea', 'Area', 'TotalFocalArea')))
area_summary <- focal_areas %>%
ungroup() %>%
group_by(Code) %>%
mutate(TotalArea = sum(Area)) %>%
ungroup() %>%
distinct(Code, .keep_all = T) %>%
select(Stratum = Code, TotalArea, PropArea, TotalFocalArea) %>%
mutate(PropArea = TotalArea/sum(TotalArea)) %>%
st_drop_geometry()
base_target_pts <- focal_pts %>%
filter(str_detect(Panel, 'OverSample', negate = T))
# need to calculate the desired sites per stratum as function of plot weight.
area_summary <- area_summary %>%
left_join(., deSS, by = 'Stratum') %>%  # desired ss total_area
mutate(DesiredSS = round(DesiredSS * (nrow(base_target_pts)/255))) %>%
drop_na()
pt_draw <- focal_pts %>%
group_by(stratum, Plot.Status) %>%
count() %>%
st_drop_geometry() %>%
pivot_wider(id_cols = stratum, names_from = Plot.Status, values_from = n,
values_fill = 0) %>%
rowwise() %>%
mutate(total = sum(across(not_sampled:sampled)), .before = 'not_sampled')
OriginalWeights <- left_join(area_summary, pt_draw,
by = c('Stratum' = 'stratum')) %>%
select(any_of(c(Stratum, Total = total, NotSampled = not_sampled, Rejected = rejected,
Sampled = sampled, DesiredSS, PropArea, PropTarget, Acres =  TotalArea))) %>%
mutate(ApproxStWgt =  if_else(DesiredSS >= 5, (Acres/DesiredSS) * 5, (DesiredSS/5) * Acres))
#  OriginalWeights <- drop_na(OriginalWeights)
obs <- list(focal_pts, OriginalWeights)
return(obs)
}
OW_deNM <- originalWeights(DEnm , strat_raster, pts)
View(pts)
mnmt_pts <- pts[unlist(st_intersects(monuments,
st_transform(pts, st_crs(monuments)))),]
mnmtSpat <- vect(monuments) %>% project(., crs(strat_raster))
mnmt_areas <- terra::expanse(mnmtSpat, unit = 'ha') * 2.47105 # conversion to acres
TotalFocalArea <- sum(mnmt_areas)
mnmt_areas <- bind_cols(ID = 1:2, Total_Area =  mnmt_areas,
TotalFocalArea = TotalFocalArea)
raster_cells <- extract(strat_raster, mnmtSpat) %>%
group_by(ID, BPS_CODE) %>%
count() %>%
ungroup(BPS_CODE) %>%
mutate(PropArea = n/sum(n))  %>%
left_join(., lookup_table, by = c('BPS_CODE' = 'RasterValue'))
rm(mnmtSpat, TotalFocalArea)
View(mnmt_areas)
mnmt_areas <- left_join(mnmt_areas, raster_cells) %>%
mutate(Area = Total_Area * PropArea)  %>%
select(ID,  Total_Area, Code, PropArea, Area, TotalFocalArea)
View(mnmt_areas)
originalWeights <- function(sample_area, strat_raster, pt_data){
focal_pts <- pts[unlist(st_intersects(sample_area, st_transform(pt_data, st_crs(sample_area)))),]
# identify the cover of each stratum in the focal area
areaSpat <- vect(sample_area)
focal_areas <- terra::expanse(areaSpat, unit = 'ha') * 2.47105 # conversion to acres
TotalFocalArea <- sum(focal_areas)
focal_areas <- bind_cols(sample_area, Total_Area =  focal_areas, TotalFocalArea = TotalFocalArea)
areaSpat <- project(areaSpat, crs(strat_raster))
raster_cells <- extract(strat_raster, areaSpat) %>%
group_by(ID, BPS_CODE) %>%
count() %>%
ungroup(BPS_CODE) %>%
mutate(PropArea = n/sum(n))  %>%
left_join(., lookup_table, by = c('BPS_CODE' = 'RasterValue'))
rm(areaSpat, TotalFocalArea)
focal_areas <- left_join(focal_areas, raster_cells) %>%
mutate(Area = Total_Area * PropArea)  %>%
select(any_of(c('ID', 'NAME', 'TYPE', 'Total_Area', 'Code', 'PropArea', 'Area', 'TotalFocalArea')))
area_summary <- focal_areas %>%
ungroup() %>%
group_by(Code) %>%
mutate(TotalArea = sum(Area)) %>%
ungroup() %>%
distinct(Code, .keep_all = T) %>%
select(Stratum = Code, TotalArea, PropArea, TotalFocalArea) %>%
mutate(PropArea = TotalArea/sum(TotalArea)) %>%
st_drop_geometry()
base_target_pts <- focal_pts %>%
filter(str_detect(Panel, 'OverSample', negate = T))
# need to calculate the desired sites per stratum as function of plot weight.
area_summary <- area_summary %>%
left_join(., deSS, by = 'Stratum') %>%  # desired ss total_area
mutate(DesiredSS = round(DesiredSS * (nrow(base_target_pts)/255))) %>%
drop_na()
pt_draw <- focal_pts %>%
group_by(stratum, Plot.Status) %>%
count() %>%
st_drop_geometry() %>%
pivot_wider(id_cols = stratum, names_from = Plot.Status, values_from = n,
values_fill = 0) %>%
rowwise() %>%
mutate(total = sum(across(not_sampled:sampled)), .before = 'not_sampled')
OriginalWeights <- left_join(area_summary, pt_draw,
by = c('Stratum' = 'stratum')) %>%
select(any_of(c(Stratum, Total = total, NotSampled = not_sampled, Rejected = rejected,
Sampled = sampled, DesiredSS, PropArea, PropTarget, Acres =  TotalArea))) %>%
mutate(ApproxStWgt =  if_else(DesiredSS >= 5, (Acres/DesiredSS) * 5, (DesiredSS/5) * Acres))
#  OriginalWeights <- drop_na(OriginalWeights)
obs <- list(focal_pts, OriginalWeights)
return(obs)
}
originalWeights <- function(sample_area, strat_raster, pt_data){
focal_pts <- pts[unlist(st_intersects(sample_area, st_transform(pt_data, st_crs(sample_area)))),]
# identify the cover of each stratum in the focal area
areaSpat <- vect(sample_area)
focal_areas <- terra::expanse(areaSpat, unit = 'ha') * 2.47105 # conversion to acres
TotalFocalArea <- sum(focal_areas)
focal_areas <- bind_cols(sample_area, Total_Area =  focal_areas, TotalFocalArea = TotalFocalArea)
areaSpat <- project(areaSpat, crs(strat_raster))
raster_cells <- extract(strat_raster, areaSpat) %>%
group_by(ID, BPS_CODE) %>%
count() %>%
ungroup(BPS_CODE) %>%
mutate(PropArea = n/sum(n))  %>%
left_join(., lookup_table, by = c('BPS_CODE' = 'RasterValue'))
rm(areaSpat, TotalFocalArea)
vars <- c('ID', 'NAME', 'TYPE', 'Total_Area', 'Code',
'PropArea', 'Area', 'TotalFocalArea')
focal_areas <- left_join(focal_areas, raster_cells) %>%
mutate(Area = Total_Area * PropArea)  %>%
select(any_of(vars))
area_summary <- focal_areas %>%
ungroup() %>%
group_by(Code) %>%
mutate(TotalArea = sum(Area)) %>%
ungroup() %>%
distinct(Code, .keep_all = T) %>%
select(Stratum = Code, TotalArea, PropArea, TotalFocalArea) %>%
mutate(PropArea = TotalArea/sum(TotalArea)) %>%
st_drop_geometry()
base_target_pts <- focal_pts %>%
filter(str_detect(Panel, 'OverSample', negate = T))
# need to calculate the desired sites per stratum as function of plot weight.
area_summary <- area_summary %>%
left_join(., deSS, by = 'Stratum') %>%  # desired ss total_area
mutate(DesiredSS = round(DesiredSS * (nrow(base_target_pts)/255))) %>%
drop_na()
pt_draw <- focal_pts %>%
group_by(stratum, Plot.Status) %>%
count() %>%
st_drop_geometry() %>%
pivot_wider(id_cols = stratum, names_from = Plot.Status, values_from = n,
values_fill = 0) %>%
rowwise() %>%
mutate(total = sum(across(not_sampled:sampled)), .before = 'not_sampled')
OriginalWeights <- left_join(area_summary, pt_draw,
by = c('Stratum' = 'stratum')) %>%
select(any_of(c(Stratum, Total = total, NotSampled = not_sampled, Rejected = rejected,
Sampled = sampled, DesiredSS, PropArea, PropTarget, Acres =  TotalArea))) %>%
mutate(ApproxStWgt =  if_else(DesiredSS >= 5, (Acres/DesiredSS) * 5, (DesiredSS/5) * Acres))
obs <- list(focal_pts, OriginalWeights)
return(obs)
}
DEnm <- monuments %>% filter(str_detect(NLCS_NAME, 'Dominguez'))
OW_deNM <- originalWeights(DEnm, strat_raster, pts)
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
library(tidyverse)
library(sf)
library(terra)
library(spsurvey)
library(ggalluvial)
source('functions.R')
originalWeights <- function(sample_area, strat_raster, pt_data){
focal_pts <- pts[unlist(st_intersects(sample_area, st_transform(pt_data, st_crs(sample_area)))),]
# identify the cover of each stratum in the focal area
areaSpat <- vect(sample_area)
focal_areas <- terra::expanse(areaSpat, unit = 'ha') * 2.47105 # conversion to acres
TotalFocalArea <- sum(focal_areas)
focal_areas <- bind_cols(sample_area, Total_Area =  focal_areas, TotalFocalArea = TotalFocalArea)
areaSpat <- project(areaSpat, crs(strat_raster))
raster_cells <- extract(strat_raster, areaSpat) %>%
group_by(ID, BPS_CODE) %>%
count() %>%
ungroup(BPS_CODE) %>%
mutate(PropArea = n/sum(n))  %>%
left_join(., lookup_table, by = c('BPS_CODE' = 'RasterValue'))
rm(areaSpat, TotalFocalArea)
vars <- c('ID', 'NAME', 'TYPE', 'Total_Area', 'Code',
'PropArea', 'Area', 'TotalFocalArea')
focal_areas <- left_join(focal_areas, raster_cells) %>%
mutate(Area = Total_Area * PropArea)  %>%
select(any_of(vars))
area_summary <- focal_areas %>%
ungroup() %>%
group_by(Code) %>%
mutate(TotalArea = sum(Area)) %>%
ungroup() %>%
distinct(Code, .keep_all = T) %>%
select(Stratum = Code, TotalArea, PropArea, TotalFocalArea) %>%
mutate(PropArea = TotalArea/sum(TotalArea)) %>%
st_drop_geometry()
base_target_pts <- focal_pts %>%
filter(str_detect(Panel, 'OverSample', negate = T))
# need to calculate the desired sites per stratum as function of plot weight.
area_summary <- area_summary %>%
left_join(., deSS, by = 'Stratum') %>%  # desired ss total_area
mutate(DesiredSS = round(DesiredSS * (nrow(base_target_pts)/255))) %>%
drop_na()
pt_draw <- focal_pts %>%
group_by(stratum, Plot.Status) %>%
count() %>%
st_drop_geometry() %>%
pivot_wider(id_cols = stratum, names_from = Plot.Status, values_from = n,
values_fill = 0) %>%
rowwise() %>%
mutate(total = sum(across(not_sampled:sampled)), .before = 'not_sampled')
OriginalWeights <- left_join(area_summary, pt_draw,
by = c('Stratum' = 'stratum')) %>%
select(any_of(c(Stratum, Total = total, NotSampled = not_sampled, Rejected = rejected,
Sampled = sampled, DesiredSS, PropArea, PropTarget, Acres =  TotalArea))) %>%
mutate(ApproxStWgt =  if_else(DesiredSS >= 5, (Acres/DesiredSS) * 5, (DesiredSS/5) * Acres))
obs <- list(focal_pts, OriginalWeights)
return(obs)
}
plotWeigher <- function(OrigWeights, pts){
pts_base <- filter(pts, str_detect(Panel, 'OverSample', negate = T))
aim_sites <- pts_base %>%
mutate(Plot.Status = if_else(Plot.Status == 'sampled', T, F)) %>%
pull(Plot.Status, stratum)
aim_wgtcat <- pull(pts_base, stratum)
aim_wgt <- OrigWeights %>% # acreage and proportion give the same results.
select(PropTarget, Stratum) %>%
left_join(., pts_base %>% select(stratum), by = c('Stratum' = 'stratum')) %>%
mutate(Stratum = factor(Stratum, levels = (unique(aim_wgtcat))))  %>%
arrange(Stratum) %>%
pull(PropTarget, Stratum)
aim_framesize <- pull(OrigWeights, DesiredSS, Stratum)
aim_sites <- aim_sites[order(names(aim_sites))]
aim_wgt <- aim_wgt[order(names(aim_wgt))]
aim_wgtcat <- aim_wgtcat[order(aim_wgtcat)]
aim_framesize <- aim_framesize[match(unique(aim_wgtcat),names(aim_framesize))]
aim_wgt <- aim_wgt[!is.na(names(aim_wgt))]
res <- adjwgt(aim_wgt, aim_wgtcat, framesize = aim_framesize, sites = aim_sites)
names(res) <- aim_wgtcat
res <- ifelse(res > 1, 1/res, res)
newWghts <- data.frame(
'Stratum' = names(res),
'Weight' = res) %>%
group_by(Stratum) %>%
filter(Weight > 0) %>%
add_count(name = 'PlotsSampled') %>%
distinct(.keep_all = T) %>%
mutate(WghtPerPlot = Weight / PlotsSampled)
newWghts1 <- data.frame(
'Stratum' = names(res),
'Weight' = res) %>%
group_by(Stratum, Weight) %>%
filter(Weight == 0) %>%
add_count(name = 'PlotsRejected')  %>%
distinct(.keep_all = T) %>%
ungroup %>%
select(-Weight)
newWghts <- left_join(newWghts, newWghts1) %>%
left_join(., OrigWeights %>%
select(TotalAcres = Acres, Rejected, Stratum) ) %>%
arrange(-Weight) %>%  # this works to catch any
group_by(Stratum) %>% # values which may be introduced
slice_head(n = 1) %>%  # by an empty second data.frame
mutate(WgtAcres = WghtPerPlot * TotalAcres,
AreaInference = TotalAcres * Weight)  %>%
select(Stratum, TotalAcres, AreaInference, WgtAcres,
PlotsSampled, PlotsRejected, PropInference = Weight, WghtPerPlot)  %>%
mutate(across(where(is.numeric), ~ replace_na(.x, 0)))
return(newWghts)
}
knitr::opts_chunk$set(echo = F)
knitr::opts_chunk$set(dpi = 300)
knitr::opts_chunk$set(message = F)
knitr::opts_chunk$set(warning = F)
library(tidyverse)
library(sf)
library(terra)
library(spsurvey)
library(ggalluvial)
source('functions.R')
